<UserControl x:Class="oop_project.Views.BTGraphView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:oop_project.Views"
             xmlns:converters="clr-namespace:oop_project.Converters"
             xmlns:models="clr-namespace:oop_project.Models"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             Background="DarkGray">

    <UserControl.Resources>
        <sys:Double x:Key="CellDimension">50</sys:Double>
        <Point x:Key="CellCenter" X="25" Y="25"/>
        <sys:Double x:Key="NodeRadius">23</sys:Double>

        <converters:PointToMarginConverter x:Key="PointToMarginConverter"/>
        <converters:BTPositionToPointConverter x:Key="BTPositionToPointConverter"/>

        <DataTemplate DataType="{x:Type models:BTVertex}">
            <Grid Name="grid" Width="{StaticResource CellDimension}" Height="{StaticResource CellDimension}">
                <Grid.Margin>
                    <MultiBinding Converter="{StaticResource PointToMarginConverter}">
                        <Binding Path="Position" Converter="{StaticResource BTPositionToPointConverter}"></Binding>
                        <Binding ElementName="grid" Path="ActualWidth"></Binding>
                        <Binding ElementName="grid" Path="ActualHeight"></Binding>
                    </MultiBinding>
                </Grid.Margin>
                <Path Stroke="Black" StrokeThickness="4" Fill="White" HorizontalAlignment="Center" VerticalAlignment="Center" Panel.ZIndex="0">
                    <Path.Data>
                        <EllipseGeometry Center="{StaticResource CellCenter}"
                                         RadiusX="{StaticResource NodeRadius}"
                                         RadiusY="{StaticResource NodeRadius}"/>
                    </Path.Data>
                </Path>
                <TextBlock Text="{Binding Path=Value}" FontWeight="Bold" FontSize="16" HorizontalAlignment="Center" VerticalAlignment="Center" Panel.ZIndex="1"/>
            </Grid>
        </DataTemplate>
        <DataTemplate DataType="{x:Type models:BTEdge}">
            <Path Stroke="Black" StrokeThickness="4">
                <Path.Data>
                    <LineGeometry StartPoint="{Binding Path=Start, Converter={StaticResource BTPositionToPointConverter}}"
                                  EndPoint="{Binding Path=End, Converter={StaticResource BTPositionToPointConverter}}"/>
                </Path.Data>
            </Path>
        </DataTemplate>
        
        <!--The following code is an edited Button template (added rounded corners)-->
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="roundedButton" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true"
                                CornerRadius="5" Width="50" Height="35">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <StackPanel Orientation="Horizontal" Grid.Column="0" Margin="5">
            <StackPanel Orientation="Vertical">
                <TextBlock Text="Node value:" HorizontalAlignment="Center"/>
                <TextBox x:Name="NodeValue" Text="{Binding NodeValue}" PreviewTextInput="NubmersOnly" MaxLength="4" Cursor="IBeam" />
            </StackPanel>
            <Button Name="Add" Command="{Binding AddNodeCommand}" CommandParameter="{Binding ElementName=NodeValue, Path=Text}" Content="Add" Margin="3,0,3,0" Style="{DynamicResource roundedButton}" Cursor="Hand"/>
            <Rectangle VerticalAlignment="Stretch" Width="1" Stroke="Gray" />
            <Button Name="Delete" Command="{Binding DeleteNodeCommand}" Content="Delete" Margin="3,0,0,0" Style="{DynamicResource roundedButton}" Cursor="Hand"/>
            <Button Name="Reset" Command="{Binding ResetTreeCommand}" Content="Reset" Margin="3,0,0,0" Style="{DynamicResource roundedButton}" Cursor="Hand"/>
        </StackPanel>

        <Border Grid.Row="1" Background="White" BorderThickness="3" BorderBrush="Black" CornerRadius="5">
        <Grid Margin="1">
            <ItemsControl ItemsSource="{Binding Path=BTVertices, UpdateSourceTrigger=PropertyChanged}" Panel.ZIndex="1">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas ClipToBounds="True"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>

            <ItemsControl ItemsSource="{Binding Path=BTEdges, UpdateSourceTrigger=PropertyChanged}" Panel.ZIndex="0">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas ClipToBounds="True"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </Grid>
        </Border>

        <!--<local:ScrollDragZoomControl  x:Name="sdzControl" Grid.Column="1">
        </local:ScrollDragZoomControl>-->
    </Grid>

</UserControl>
